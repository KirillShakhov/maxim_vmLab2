package lab;
import lab.methods.IterationMethod;
import lab.models.IFunc;
import lab.models.IndividualFunc;
import lab.models.Point;
import lab.models.Result;
import lab.methods.BinaryMethod;
import lab.libs.GraphModule;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Bootstrap {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤ –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤(–ª–µ–≤—ã—Ö, –ø—Ä–∞–≤—ã—Ö, —Å—Ä–µ–¥–Ω–∏—Ö) –∏ –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞");
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:");
        Map<String, IFunc> funcs = new HashMap<>();
        //
        funcs.put("2,74x^3-1,93x^2-15,28x-3,72", x -> 2.74*Math.pow(x, 3)-1.93*Math.pow(x, 2)-15.28*x-3.72);
        //2,74ùë•3‚àí1,93ùë•2‚àí15,28ùë•‚àí3,72
        //
        funcs.put("sin(x)/x-6", x -> Math.sin(x)/(x-6));
        //

        /*
        –í—ã–≤–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞. –ù–µ —Ç—Ä–æ–≥–∞—Ç—å.
        */
        int i = 1;
        ArrayList<String> keys = new ArrayList<>();
        for (Map.Entry<String, IFunc> entry : funcs.entrySet()) {
            System.out.println((i++) + ". " + entry.getKey());
            keys.add(entry.getKey());
        }
        System.out.println(funcs.size()+1 + ". –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —É—Ä–∞–≤–Ω–µ–Ω–∏–µ");
        String str = scanner.nextLine();
        IFunc func1;
        try {
            func1 = funcs.get(keys.get(Integer.parseInt(str) - 1));
        } catch (Exception e) {
            IndividualFunc individualFunc = new IndividualFunc();
            individualFunc.execute();
            func1 = individualFunc;
        }
        // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        double a, b, eps;
        while (true) {
            try {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ a");
                a = Double.parseDouble(scanner.nextLine());
                System.out.println("–í–≤–µ–¥–∏—Ç–µ b");
                b = Double.parseDouble(scanner.nextLine());
                if (a > b) {
                    double t = a;
                    a = b;
                    b = a;
                }
                System.out.println("–í–≤–µ–¥–∏—Ç–µ eps");
                eps = Double.parseDouble(scanner.nextLine());
                break;
            } catch (Exception ignored) { }
        }
        Map<String, ArrayList<IFunc>> map_func = new HashMap<>();
        Map<String, ArrayList<Point>> point_func = new HashMap<>();
        // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        ArrayList<IFunc> arrayListFuncs = new ArrayList<>();
        arrayListFuncs.add(func1);
        map_func.put("–§—É–Ω–∫—Ü–∏—è", arrayListFuncs);
        // –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
        Result result1 = BinaryMethod.solve(func1, a, b, eps);
        result1.printTable();
        ArrayList<Point> p1 = new ArrayList<>();
        p1.add(result1.getPoint());
        point_func.put("–†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è", p1);
        // –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –ù—å—é—Ç–æ–Ω–∞
//        Result result2;
//        result2.printTable();
//        ArrayList<Point> p2 = new ArrayList<>();
//        p2.add(result2.getPoint());
//        point_func.put("–†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ù—å—é—Ç–æ–Ω–∞", p2);

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π x –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏");
        double x0 = Double.parseDouble(scanner.nextLine());
        // –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        Result result3 = IterationMethod.solve(func1, x0, eps);
        result3.printTable();
        ArrayList<Point> p3 = new ArrayList<>();
        p3.add(result3.getPoint());
        point_func.put("–†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏", p3);
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        new GraphModule(map_func, point_func);
    }
}
